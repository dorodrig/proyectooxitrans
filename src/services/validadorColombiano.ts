// ====================================
// üõ°Ô∏è SERVICIO DE VALIDACIONES OXITRANS
// Validaciones espec√≠ficas para Colombia
// ====================================

export interface ValidacionResult {
  esValido: boolean;
  mensaje: string;
  tipo: 'error' | 'warning' | 'info' | 'success';
  sugerencias?: string[];
}

export class ValidadorColombiano {
  
  // ======== VALIDACI√ìN C√âDULA COLOMBIANA ========
  static validarCedula(cedula: string): ValidacionResult {
    // Limpiar la c√©dula de espacios y caracteres especiales
    const cedulaLimpia = cedula.replace(/[^0-9]/g, '');
    
    // Validaciones b√°sicas
    if (!cedulaLimpia) {
      return {
        esValido: false,
        mensaje: 'El n√∫mero de c√©dula es obligatorio',
        tipo: 'error',
        sugerencias: ['Ingrese un n√∫mero de documento v√°lido']
      };
    }

    if (cedulaLimpia.length < 6) {
      return {
        esValido: false,
        mensaje: 'La c√©dula debe tener m√≠nimo 6 d√≠gitos',
        tipo: 'error',
        sugerencias: ['Las c√©dulas colombianas tienen entre 6 y 10 d√≠gitos']
      };
    }

    if (cedulaLimpia.length > 10) {
      return {
        esValido: false,
        mensaje: 'La c√©dula no puede tener m√°s de 10 d√≠gitos',
        tipo: 'error',
        sugerencias: ['Verifique que no haya inclu√≠do espacios o caracteres adicionales']
      };
    }

    // Validar que no sean todos n√∫meros iguales
    const numerosIguales = /^(\d)\1+$/.test(cedulaLimpia);
    if (numerosIguales) {
      return {
        esValido: false,
        mensaje: 'La c√©dula no puede tener todos los d√≠gitos iguales',
        tipo: 'error',
        sugerencias: ['Verifique el n√∫mero de documento']
      };
    }

    // Validar secuencias obvias
    const esSecuencia = this.esSecuenciaNumerica(cedulaLimpia);
    if (esSecuencia) {
      return {
        esValido: false,
        mensaje: 'El n√∫mero ingresado parece ser una secuencia no v√°lida',
        tipo: 'warning',
        sugerencias: ['Verifique que sea el n√∫mero correcto del documento']
      };
    }

    // Algoritmo de verificaci√≥n b√°sico para c√©dula colombiana
    const esValidoAlgoritmo = this.validarAlgoritmoCedula(cedulaLimpia);
    if (!esValidoAlgoritmo) {
      return {
        esValido: false,
        mensaje: 'El formato del n√∫mero de c√©dula no es v√°lido',
        tipo: 'warning',
        sugerencias: [
          'Verifique el n√∫mero completo',
          'Aseg√∫rese de no haber omitido d√≠gitos'
        ]
      };
    }

    return {
      esValido: true,
      mensaje: 'N√∫mero de c√©dula v√°lido',
      tipo: 'success'
    };
  }

  // ======== VALIDACI√ìN DE NOMBRES ========
  static validarNombre(nombre: string): ValidacionResult {
    const nombreLimpio = nombre.trim();

    if (!nombreLimpio) {
      return {
        esValido: false,
        mensaje: 'El nombre es obligatorio',
        tipo: 'error'
      };
    }

    if (nombreLimpio.length < 2) {
      return {
        esValido: false,
        mensaje: 'El nombre debe tener al menos 2 caracteres',
        tipo: 'error'
      };
    }

    if (nombreLimpio.length > 50) {
      return {
        esValido: false,
        mensaje: 'El nombre no puede exceder 50 caracteres',
        tipo: 'error'
      };
    }

    // Validar caracteres permitidos (letras, espacios, acentos, √±)
    const patronNombre = /^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/;
    if (!patronNombre.test(nombreLimpio)) {
      return {
        esValido: false,
        mensaje: 'El nombre solo puede contener letras y espacios',
        tipo: 'error',
        sugerencias: ['No use n√∫meros o caracteres especiales']
      };
    }

    return {
      esValido: true,
      mensaje: 'Nombre v√°lido',
      tipo: 'success'
    };
  }

  // ======== VALIDACI√ìN EMAIL ========
  static validarEmail(email: string): ValidacionResult {
    const emailLimpio = email.trim().toLowerCase();

    if (!emailLimpio) {
      return {
        esValido: false,
        mensaje: 'El email es obligatorio',
        tipo: 'error'
      };
    }

    const patronEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!patronEmail.test(emailLimpio)) {
      return {
        esValido: false,
        mensaje: 'Formato de email inv√°lido',
        tipo: 'error',
        sugerencias: ['Ejemplo: usuario@empresa.com']
      };
    }

    return {
      esValido: true,
      mensaje: 'Email v√°lido',
      tipo: 'success'
    };
  }

  // ======== VALIDACI√ìN TEL√âFONO COLOMBIANO ========
  static validarTelefono(telefono: string): ValidacionResult {
    const telefonoLimpio = telefono.replace(/[\s\-\(\)]/g, '');

    if (!telefonoLimpio) {
      return {
        esValido: false,
        mensaje: 'El tel√©fono es obligatorio',
        tipo: 'error'
      };
    }

    // Validar celular colombiano (10 d√≠gitos empezando por 3)
    const patronCelular = /^3[0-9]{9}$/;
    // Validar tel√©fono fijo (7 d√≠gitos + c√≥digo de √°rea)
    const patronFijo = /^[1-9][0-9]{6,7}$/;

    if (patronCelular.test(telefonoLimpio)) {
      return {
        esValido: true,
        mensaje: 'N√∫mero de celular v√°lido',
        tipo: 'success'
      };
    }

    if (patronFijo.test(telefonoLimpio)) {
      return {
        esValido: true,
        mensaje: 'N√∫mero de tel√©fono fijo v√°lido',
        tipo: 'success'
      };
    }

    return {
      esValido: false,
      mensaje: 'Formato de tel√©fono inv√°lido',
      tipo: 'error',
      sugerencias: [
        'Celular: 10 d√≠gitos (ej: 3001234567)',
        'Fijo: 7-8 d√≠gitos (ej: 6012345678)'
      ]
    };
  }

  // ======== M√âTODOS AUXILIARES ========
  private static esSecuenciaNumerica(numero: string): boolean {
    // Detectar secuencias como 123456789, 987654321, etc.
    for (let i = 1; i < numero.length; i++) {
      const actual = parseInt(numero[i]);
      const anterior = parseInt(numero[i - 1]);
      
      if (i === 1) continue; // Necesitamos al menos 3 d√≠gitos para determinar patr√≥n
      
      const diferencia = actual - anterior;
      const diferenciaAnterior = anterior - parseInt(numero[i - 2]);
      
      if (Math.abs(diferencia) === 1 && diferencia === diferenciaAnterior && numero.length > 5) {
        return true; // Es una secuencia
      }
    }
    return false;
  }

  private static validarAlgoritmoCedula(cedula: string): boolean {
    // Algoritmo simplificado de validaci√≥n de c√©dula colombiana
    // Basado en el d√≠gito de verificaci√≥n cuando aplica
    
    if (cedula.length < 8) return true; // Para c√©dulas cortas asumimos v√°lidas
    
    try {
      let suma = 0;
      let multiplicador = 1;
      
      // Recorrer de derecha a izquierda
      for (let i = cedula.length - 2; i >= 0; i--) {
        let producto = parseInt(cedula[i]) * multiplicador;
        if (producto >= 10) {
          producto = Math.floor(producto / 10) + (producto % 10);
        }
        suma += producto;
        multiplicador = multiplicador === 1 ? 2 : 1;
      }
      
      const digitoVerificacion = (10 - (suma % 10)) % 10;
      const ultimoDigito = parseInt(cedula[cedula.length - 1]);
      
      // Para efectos pr√°cticos, aceptamos si la diferencia es m√≠nima
      // ya que no todas las c√©dulas siguen estrictamente este algoritmo
      return Math.abs(digitoVerificacion - ultimoDigito) <= 2;
      
    } catch (error) {
      return false;
    }
  }

  // ======== VALIDACI√ìN DE B√öSQUEDA ========
  static validarTerminoBusqueda(termino: string): ValidacionResult {
    const terminoLimpio = termino.trim();

    if (!terminoLimpio) {
      return {
        esValido: false,
        mensaje: 'Ingrese un t√©rmino de b√∫squeda',
        tipo: 'info'
      };
    }

    if (terminoLimpio.length < 3) {
      return {
        esValido: false,
        mensaje: `Ingrese al menos 3 caracteres (${terminoLimpio.length}/3)`,
        tipo: 'warning'
      };
    }

    if (terminoLimpio.length > 50) {
      return {
        esValido: false,
        mensaje: 'El t√©rmino de b√∫squeda es muy largo',
        tipo: 'error'
      };
    }

    // Detectar si es c√©dula num√©rica
    const esSoloNumeros = /^\d+$/.test(terminoLimpio);
    if (esSoloNumeros) {
      const validacionCedula = this.validarCedula(terminoLimpio);
      if (!validacionCedula.esValido && validacionCedula.tipo === 'error') {
        return {
          esValido: false,
          mensaje: 'Formato de c√©dula inv√°lido',
          tipo: 'warning',
          sugerencias: validacionCedula.sugerencias
        };
      }
    }

    // Validar caracteres especiales excesivos
    const caracteresEspeciales = terminoLimpio.match(/[^a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë0-9\s]/g);
    if (caracteresEspeciales && caracteresEspeciales.length > 2) {
      return {
        esValido: false,
        mensaje: 'Demasiados caracteres especiales en la b√∫squeda',
        tipo: 'warning',
        sugerencias: ['Use solo letras, n√∫meros y espacios']
      };
    }

    return {
      esValido: true,
      mensaje: 'T√©rmino de b√∫squeda v√°lido',
      tipo: 'success'
    };
  }

  // ======== SANITIZACI√ìN ========
  static sanitizarInput(input: string): string {
    return input
      .trim()
      .replace(/\s+/g, ' ') // M√∫ltiples espacios a uno solo
      .replace(/[<>]/g, ''); // Remover caracteres potencialmente peligrosos
  }

  // ======== FORMATEAR C√âDULA ========
  static formatearCedula(cedula: string): string {
    const cedulaLimpia = cedula.replace(/[^0-9]/g, '');
    if (cedulaLimpia.length <= 3) return cedulaLimpia;
    
    // Formato: 12.345.678
    return cedulaLimpia.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
  }

  // ======== FORMATEAR TEL√âFONO ========
  static formatearTelefono(telefono: string): string {
    const telefonoLimpio = telefono.replace(/[^0-9]/g, '');
    
    if (telefonoLimpio.length === 10 && telefonoLimpio.startsWith('3')) {
      // Celular: 300 123 4567
      return `${telefonoLimpio.slice(0, 3)} ${telefonoLimpio.slice(3, 6)} ${telefonoLimpio.slice(6)}`;
    }
    
    if (telefonoLimpio.length >= 7) {
      // Fijo: 601 234 5678
      const inicio = telefonoLimpio.slice(0, -4);
      const final = telefonoLimpio.slice(-4);
      return `${inicio} ${final}`;
    }
    
    return telefono;
  }
}

export default ValidadorColombiano;